--- libobjc2-1.7/CMakeLists.txt.orig	2013-06-27 13:30:41.000000000 +0200
+++ libobjc2-1.7/CMakeLists.txt	2013-09-22 08:12:30.526420422 +0200
@@ -170,6 +170,50 @@
 	COMPILE_FLAGS "${CMAKE_OBJC_FLAGS}"
 )
 
+
+
+# Currently, we actually need pthreads, but we should use the platform's native
+# threading implementation (we do for everything except thread-local storage)
+set(CMAKE_THREAD_PREFER_PTHREAD)
+include(FindThreads)
+set(objc_LINK_FLAGS "${objc_LINK_FLAGS} ${CMAKE_THREAD_LIBS_INIT}")
+
+
+
+add_library(objc SHARED ${libobjc_C_SRCS} ${libobjc_ASM_SRCS} ${libobjc_OBJC_SRCS} ${libobjc_CXX_SRCS})
+
+set_target_properties(objc PROPERTIES
+	LINKER_LANGUAGE C
+	SOVERSION ${libobjc_VERSION}
+	OUTPUT_NAME ${LIBOBJC_NAME}
+	LINK_FLAGS "${objc_LINK_FLAGS}"
+	)
+
+
+set(BUILD_STATIC_LIBOBJC false CACHE BOOL
+	"Build the static version of libobjc")
+if (BUILD_STATIC_LIBOBJC)
+	add_library(objc-static STATIC ${libobjc_C_SRCS} ${libobjc_ASM_SRCS} ${libobjc_OBJC_SRCS} ${libobjc_CXX_SRCS})
+	set_target_properties(objc-static PROPERTIES
+		POSITION_INDEPENDENT_CODE true
+		OUTPUT_NAME ${LIBOBJC_NAME})
+	list(APPEND INSTALL_TARGETS objc-static)
+endif ()
+
+
+
+# Explicitly link the C++ runtime and libgc if we are compiling with gc support.
+target_link_libraries(objc ${CXX_RUNTIME})
+if (LIBGC)
+	target_link_libraries(objc ${LIBGC})
+endif ()
+
+# Link libdispatch if available (we'll miss symbols for toydispatch otherwise)
+find_library(LIBDISPATCH dispatch)
+if (LIBDISPATCH)
+	target_link_libraries(objc ${LIBDISPATCH})
+endif ()
+
 #
 # C++ Runtime interaction
 #
@@ -206,7 +250,7 @@
 				LINKER_LANGUAGE C
 				SOVERSION ${libobjc_VERSION}
 				)
-			target_link_libraries(objcxx ${CXX_RUNTIME})
+			target_link_libraries(objcxx objc ${CXX_RUNTIME})
 			set(CXX_RUNTIME "")
 			list(APPEND INSTALL_TARGETS objcxx)
 		else ()
@@ -222,55 +266,12 @@
 			LINKER_LANGUAGE C
 			SOVERSION ${libobjc_VERSION}
 			)
+		target_link_libraries(objcxx objc)
 		set(CXX_RUNTIME "")
 		list(APPEND INSTALL_TARGETS objcxx)
 	endif ()
 endif (ENABLE_OBJCXX)
 
-
-
-# Currently, we actually need pthreads, but we should use the platform's native
-# threading implementation (we do for everything except thread-local storage)
-set(CMAKE_THREAD_PREFER_PTHREAD)
-include(FindThreads)
-set(objc_LINK_FLAGS "${objc_LINK_FLAGS} ${CMAKE_THREAD_LIBS_INIT}")
-
-
-
-add_library(objc SHARED ${libobjc_C_SRCS} ${libobjc_ASM_SRCS} ${libobjc_OBJC_SRCS} ${libobjc_CXX_SRCS})
-
-set_target_properties(objc PROPERTIES
-	LINKER_LANGUAGE C
-	SOVERSION ${libobjc_VERSION}
-	OUTPUT_NAME ${LIBOBJC_NAME}
-	LINK_FLAGS "${objc_LINK_FLAGS}"
-	)
-
-
-set(BUILD_STATIC_LIBOBJC false CACHE BOOL
-	"Build the static version of libobjc")
-if (BUILD_STATIC_LIBOBJC)
-	add_library(objc-static STATIC ${libobjc_C_SRCS} ${libobjc_ASM_SRCS} ${libobjc_OBJC_SRCS} ${libobjc_CXX_SRCS})
-	set_target_properties(objc-static PROPERTIES
-		POSITION_INDEPENDENT_CODE true
-		OUTPUT_NAME ${LIBOBJC_NAME})
-	list(APPEND INSTALL_TARGETS objc-static)
-endif ()
-
-
-
-# Explicitly link the C++ runtime and libgc if we are compiling with gc support.
-target_link_libraries(objc ${CXX_RUNTIME})
-if (LIBGC)
-	target_link_libraries(objc ${LIBGC})
-endif ()
-
-# Link libdispatch if available (we'll miss symbols for toydispatch otherwise)
-find_library(LIBDISPATCH dispatch)
-if (LIBDISPATCH)
-	target_link_libraries(objc ${LIBDISPATCH})
-endif ()
-
 #
 # Installation
 #
